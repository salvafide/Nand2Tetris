// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/5/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM = 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    //instruction = O11accccccdddjjj
    // if i[15] == 0 then loadA, if C type instruction then use whatever instruction[5] is, one of the d bits
    Mux(a= true, b= instruction[5], sel= instruction[15], out= loadA);
    Mux16(a= instruction, b= f, sel= instruction[15], out= intoA);
    ARegister(in= intoA, load= loadA, out= rA, out[0..14]= addressM);
    
    // a bit determines using inM or rA
    Mux16(a= rA, b= inM, sel= instruction[12], out= y);
    // D reg->if A type instruction don't load, if C type then use corresponding d bit
    Mux(a=false, b= instruction[4], sel= instruction[15], out= loadD);
    DRegister(in= f, load= loadD, out= rD);
    ALU(x= rD, y= y, zx= instruction[11], nx= instruction[10], zy= instruction[9], ny= instruction[8], f= instruction[7], no= instruction[6], out= f, out= outM, zr= fz, ng= fn);
    // write to memory if M dest bit is 1 and op code is 1(a.k.a C type instruction)
    And(a= instruction[3], b= instruction[15], out= writeM);

    //Determine if a jump should happen
    Or(a= fz, b= fn, out= notPositive);
    Not(in= notPositive, out= fp);  // fp = 1, then positive number  
    //if any j bit is 1 AND corresponding negative or zero bit from ALU
    And(a= instruction[0], b= fp, out= j1);
    And(a= instruction[1], b= fz, out= j2);
    And(a= instruction[2], b= fn, out= j3);
    
    Or(a= j1, b= j2, out= j12);
    Or(a= j12, b= j3, out= jmp);

    // no jump if instruction is A type, catching if jmp is true during an A instruction
    Mux(a= false, b= jmp, sel= instruction[15], out= loadPC);
    PC(in= rA, load= loadPC, inc= true, reset=reset , out[0..14]= pc);
}