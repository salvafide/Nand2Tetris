// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack
/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    
    field Array Chars;
    field int MaxLen;
    field int ActualLen;

    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (maxLength = 0) {
            let maxLength = 1;
        }
        let MaxLen = maxLength;
        let Chars = Array.new(maxLength);
        let ActualLen = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        do Chars.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return ActualLen;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return Chars[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let Chars[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (ActualLen < MaxLen){
            let Chars[ActualLen] = c;
            let ActualLen = ActualLen + 1;
        }
        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if(ActualLen > 0){
            let ActualLen = ActualLen - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int  i, d, val, c;
        var boolean neg;
        
        let val = 0;
        let i = 0;
        let neg = false;

        // check for negative sign
        if (Chars[0] = 45){
            let i  = i + 1;
            let neg = true;
        }
        // Construct the integer to return
        while(i < ActualLen){
            let c = Chars[i];
            // ascii numbers are from 48-56, stop at first non number
            if ((c < 48) | (c > 57)) {
                if (neg) {
                    return -val;
                } else {
                    return val;
                }
            }
            let d = c - 48;
            let i = i + 1;
            let val = val * 10 + d;
        }

        if (neg) {
            return -val;
        } else {
            return val;
        }
        
        return val;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        if (val < 0){
            let val = -val;
            do appendChar(45); // minus sign
        }

        do int2String(val);
        return;
    }
    // Recursive portion of algorith so that - symbol only added once
    method void int2String(int val){
        var int c, digit;

        if(val < 10){
            let c = val + 48;
            do appendChar(c);
        }else{
            let digit = val / 10;
            do int2String(digit);
            do appendChar( val - (digit * 10) );
        }
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
